<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAEZTeXN0ZW0uV2luZG93cy5Gb3JtcywgQ3VsdHVyZT1uZXV0cmFs
        LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAAAmU3lzdGVtLldpbmRvd3MuRm9ybXMu
        SW1hZ2VMaXN0U3RyZWFtZXIBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAKgkAAAJNU0Z0AUkBTAIBAQQB
        AAEYAQABGAEAARABAAEQAQAE/wEhAQAI/wFCAU0BNgcAATYDAAEoAwABQAMAASADAAEBAQABIAYAASD/
        AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AGYAAygB6QMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB
        /wMAAf8DAAH/AwAB/wMAAf8DSwGZLAADCQELHAADPwF0AwIB/gMAAf8DHQEoRAADCAEKA04BsQMOARID
        FgEeA0YBygMlATcYAAMnAToUAAM1AVYDKQHrAxYBHggAA0oBwCAAAxQBGwMxAUwDJwE6AzgBWwMlATcY
        AAMkAeQDFQEdBwAB/wMdAShAAANFAX0DNwFaAzoBYgNDAXgDKAE8AzsBYwNAAW8DHQEpEAADHgEqGAAD
        OQFeAzkBXgMAAf8EAANNAa8gAAMTARkDJgE4AxcBHwMlATcDIAEuAxUBHBsAAf8DEgEYBwAB/wMdASg0
        AAM/AWwEAANKAY4DFAEbA0kBkAMOARIDSwG+AzABSgMPARMDEgEYEAADHgEqGwAB/wMzAVIHAAH/A00B
        rxQAAwYBCAMPARQDDwEUAx0BKQMkATQDIQEvAyEBLwMZASIDGQEiAw8BFAMPARQDBwEJEwAB/wMSARgH
        AAH/Ax0BKCwAAwMBBANCAXYDNAFUAzgBXANLAbUDJAE1A0wBvQMkATQDRQF+A0UBgANNAaEDGAEgDAAD
        HgEqAw8B+QNHAYQDTQGhAwAB/wMAAf8DBgH9AyQBNANJAYkLAAH/HAADAgEDAyABLgMeASsDFgEdAxsB
        JQMeASsDGgEkAwkBCx8AAf8DEwEZBwAB/wMdASgoAAMbASYDOwFlA0oBkgMmATkDGgHzAygBOwNJAYoD
        OgFhAzABSgMJAQsDFQEdA0cBhAwAAx4BKgMaAfMEAANNAaEDTQGgA00BpgNNAaYDPwFsAyQBNANJAYkL
        AAH/GAADCAEKAx8BLAMbASYDFQQcAScDEgEXAxoBIwMKAQ0jAAH/AxMBGQcAAf8DDAH4AwAB/wMAAf8D
        AAH/AwAB/wNBAbQQAAMbASUDPQFpA0kBigMsAUMDOAHeAyABLgMYASADSgGUAwIBAwNFAX8EAANFAX8M
        AAMeASoDIgExAyIBMQMFAQYUAAMkATQDSQGJCwAB/xQAA0ABbwJIAUkBhwNEAXoBTQJOAZoDRgF+A0UB
        fAFHAkgBhQM7AWQnAAH/AxMBGQMAAf8DHgEqEAADRQGgAwAB/xAAA0MBegMSARgDRQGBAxIBFwM+AdcD
        KAHqA0UBfwMPARQDSQGLAyEBMANAAXAMAAMeASoDHQHxAx0B8QM9AWkYAAMkATQDSQGJA0sBmAMfASwD
        AAH/DAADMwFQA0YBfwM/AWwDNAFUAysBQQItAS4BRgM6AWEDNAFUAyoBQAMuAUcnAAH/AwYBBxgAA0QB
        jgM3Ac4MAANDAXoDEAEVAz0BaANDAXkDKQE9AywBQwM+AWoDTAGyAyoBQANEAc0DGgEkDAADHgEqAxoB
        8wQAA00BoRwAA00BrwNMAZsHAAH/DAADJgE4Ay4BRwMpAT0DKwFCAyUBNgMuAUcDIAEuAzABTAMoATsD
        JQE3IAAEAgMEAfwjAAH/CAADTQGkAxsBJQNAAdIDEgEYAxUBHANJAYkDSgHAAzYBWQQAA00BswMjATID
        KwFCDAADHgEqAwAB/wMAAf8DTQGgA00BpgNOAawDTgGsA0EBcgwAA00BrwMKAQ0DTQGgGAADIAEtAVQB
        ZQFUAcEBSwFPAUsBjwFIAUoBSAGFMAADRQGSAy4BSCAAAwYB+wgAAyMBMwNFAX0DEgEYAzkBXwM9AWkD
        PgFqAz8BbANKAZIDTQGvAzYBVwM6AWADPQFnDAADHgEqKAADTQGvIAADIAEuAVUBbAFVAcgBTAFPAUwB
        kwFMAU8BTAGOAzsBYwMTARooAANDAbEDGgEkIAADKgHdDAADGQEjAzoB2wMtAUUEAAMQARUDHgErAwIB
        AwMTARoDTQGnAysBQRAAAx4BKgMUAfcDOQFeA00BoQMAAf8DAAH/AwkB+wgAA0UBgQNMAaMDMwHiIAAD
        IQEvAVQBawFUAckBTQFRAU0BlQFNAVEBTQGVAVQBagFUAcYDJAE1KAADKwFBA0QBqyMAAf8MAAMEAQUD
        KwFCAzkBXwNHAYQDRQGAA0UBgANGAYMDQgF0AysBQgMKAQ0QAAMeASoDGgHzBAADTQGhA0kBxQNGAcoD
        RgHKA0oBjgM4Ad4EAAMwAUwDPQFpIAADKAE8ATkBkwE6Af4BVQFlAVUBvgFTAV0BUwGwNwAB/wQAAzwB
        wgMIAfoEAQMPARMDAAH/AyQBNQcAAf8MAAMLAQ4DRQHLA0oBvwMmATgDEQEWAw4BEgM3AVoDSwGfAz0B
        1gMUARsQAAMeASoDCwEOAwsBDhcAAf8DMAFMAz0BaSQAAx0BKAFOAVIBcgHKAUwBTgFMAZEBTAFQAUwB
        kgFQAVYBUAGjAx8BLCwAAzwBaQMEAfwEAAMSARgDIQHmAzQB0QQBBwAB/wQBFAADJwE6Az8BbQNFAX8D
        RQGAA0IBdQMxAU4DDAEPFwAB/wMdASkDHQEpAx0BKQMdASkDHQEpAx0BKQMdASkDAAH/Az0BZygAAxEB
        FgJGAUkBggM4AVwDOgFgAUcBSAFHAYIDGgEjMAADQAF4AwAB/wNBAXsEAAQBAz4BvAMAAf8DCwEO6AAD
        PwF0AxQB8QMoAeADKgFADAABQgFNAT4HAAE+AwABKAMAAUADAAEgAwABAQEAAQEGAAEBFgAD/4EAAv8B
        gAEHAf8BfwEPAf8B+AEfAb4BNwH4AT8BJwH/AfgBBwG/ARcB+AEfAZMB/wHoAQcBvwEnAcABAwHJAf8B
        wAEDAYABNwHwAQ8B5AH/AcABAwGQARsB8AEPAfIBAwHAAQsBhwHNAfABDwH4AXkB4AEDAYcC4AEHAvwB
        4AEDAZcB8gHgAQcB+QH+AcABIwGAAXEB+AF/AfkB/gHAAQMBvwH3AfgBHwH5Af4B4gEHAYABxwH4AR8B
        +QH+AeABBwGQAScB+AF/Af0BAgHgAQcCjwH4AR8B/AGEAfgBDwGAAR8B+AEfAf4BIQf/AYcL
</value>
  </data>
</root>